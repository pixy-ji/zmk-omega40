/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define lower 1
#define raise 2

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp ESC      &kp Q     &kp W     &kp E     &kp R     &kp T   &kp Y     &kp U     &kp I      &kp O      &kp P   &kp BSPC
                &kp TAB      &kp A     &kp S     &kp D     &kp F     &kp G   &kp H     &kp J     &kp K      &kp L      &kp RET    
                &kp LSHFT    &kp Z     &kp X     &kp C     &kp V     &kp B   &kp N     &kp M     &kp COMMA  &kp DOT    &kp UP
                &kp LCTRL    &kp LGUI  &kp LALT  &mo lower       &kp SPACE       &mo raise              &kp LEFT   &kp DOWN   &kp RIGHT
            >;
        };
        lower_layer {
            bindings = <
               &kp N1        &kp N2         &kp N3         &kp N4         &kp N5         &kp N6       &kp N7         &kp N8      &kp N9       &kp N0      &kp MINUS   &kp EQUAL
                &trans     &trans      &trans      &trans      &trans      &trans    &trans      &kp LBKT    &kp RBKT     &kp NUBS    &kp LSHFT    
                &trans     &trans      &trans      &trans      &trans      &trans    &trans      &trans   &kp SEMI     &kp APOS    &kp FSLH
                &trans     &trans      &trans      &trans      &kp CAPS       &trans                                   &kp PG_DN   &kp HOME    &kp PG_UP
            >;
        };
        raise_layer {
            bindings = <
                &kp F1       &kp F2         &kp F3           &kp F4           &kp F5           &kp F6       &kp F7         &kp F8       &kp F9       &kp F10    &kp F11   &kp F12
                &bt BT_CLR       &bt BT_SEL 1   &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &trans    &trans      &trans    &trans    &trans  &rgb_ug RGB_TOG   
                &bootloader  &trans     &trans        &trans        &trans        &trans    &trans      &trans    &trans   &trans  &trans 
                &trans    &trans     &trans        &trans        &trans        &trans                                &trans    &trans  &trans 
            >;
        };
    };
};
